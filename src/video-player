<template>
  <div class="tv-container" @contextmenu.prevent.stop="">
    <video id="video-play" class="video-js vjs-default-skin vjs-big-play-centered"></video>
    <el-popover
        ref="pop-btn"
        width="40px"
        placement="top"
        trigger="hover"
        content="这是一段内容,这是一段内容,这是一段内容,这是一段内容。">
      <i slot="reference" class="vjs-control el-icon-s-tools"></i>
    </el-popover>
  </div>
</template>

<script>
import videojs from 'video.js'
import 'video.js/dist/video-js.css'

export default {
  name: "video-player",
  data() {
    return {
      videoPlayer: null,
      videoOptions: {
        autoplay: false, //如果true,浏览器准备好时开始回放。
        muted: false, // 默认情况下将会消除任何音频。
        loop: false, // 视频一结束就重新开始。
        preload: "auto", // 建议浏览器在<video>加载元素后是否应该开始下载视频数据。auto浏览器选择最佳行为,立即开始加载视频（如果浏览器支持）
        language: "zh-CN",
        aspectRatio: "16:9", // 将播放器置于流畅模式，并在计算播放器的动态大小时使用该值。值应该代表一个比例 - 用冒号分隔的两个数字（例如"16:9"或"4:3"）
        fluid: true, // 当true时，Video.js player将拥有流体大小。换句话说，它将按比例缩放以适应其容器。
        controls: true,
        sources: [
          {
            type: "video/mp4",
            src: require('../../assets/video/oceans.mp4')
          },
        ],
        poster: "https://img2.baidu.com/it/u=255734936,1112291715&fm=253&fmt=auto&app=138&f=JPG?w=800&h=500", //你的封面地址
        width: "100%",
        height: "100%",
        notSupportedMessage: "此视频暂无法播放，请稍后再试", //允许覆盖Video.js无法播放媒体源时显示的默认信息。
        controlBar: {
          children: [
            {name: 'playToggle'}, // 播放按钮
            {
              name: 'volumePanel', // 音量控制
              inline: false, // 不使用水平方式
            },
            {name: 'liveDisplay'}, // 总时间
            {name: 'currentTimeDisplay'}, // 当前已播放时间
            {name: 'timeDivider'}, // 分隔符
            {name: 'durationDisplay'}, // 总时间
            {name: 'progressControl'}, // 播放进度条
            {name: 'FullscreenToggle'},
            { // 倍数播放
              name: 'playbackRateMenuButton',
              'playbackRates': [0.5, 1, 1.5, 2, 2.5]
            },
          ]
        },
      }
    }
  },
  mounted() {
    this.initVideo()
  },
  methods: {
    initVideo() {
      this.videoPlayer = videojs("video-play", this.videoOptions)
      this.addMenu()
      this.addButton()
      this.addFullscreenToggleButton()
      const child = this.$refs['pop-btn'].$el
      child.classList.add('vjs-download-btn')
      this.videoPlayer.controlBar.eventBusEl_.appendChild(child)

    },
    addFullscreenToggleButton() {
      const _this = this.videoPlayer
      const FullscreenToggle = videojs.getComponent('FullscreenToggle');
      const fullscreenToggleBut = new FullscreenToggle(_this, {
        className: 'vjs-control',
      });
      fullscreenToggleBut.eventBusEl_.addEventListener('click', () => {
        console.info('fullscreenToggleBut')
        // document.getElementById('video-play').firstChild.requestPictureInPicture()
      }, false)
      fullscreenToggleBut.controlText('custom-add');
      const concreteButtonInstance = _this.controlBar.addChild(fullscreenToggleBut);
      concreteButtonInstance.addClass("vjs-download-btn");
      // concreteButtonInstance.addClass("vjs-control");
    },
    addButton() {
      const _this = this.videoPlayer
      const Button = videojs.getComponent('ClickableComponent');
      const downloadBut = new Button(_this, {
        className: 'vjs-control',
      });
      downloadBut.eventBusEl_.addEventListener('click', () => {
        console.info('clickHandler')
        document.getElementById('video-play').firstChild.requestPictureInPicture()
      }, false)
      downloadBut.controlText('custom-add');
      const concreteButtonInstance = _this.controlBar.addChild(downloadBut);
      concreteButtonInstance.addClass("vjs-download-btn");
      // concreteButtonInstance.addClass("vjs-control");
    },
    addMenu() {
      const Menu = videojs.getComponent('Menu')
      const MenuItem = videojs.getComponent('MenuItem')
      const MenuButton = videojs.getComponent('MenuButton')
      const items = ['download', 'p-in-p', 'playback']
      const moreMenu = new Menu(this.videoPlayer)
      const moreMenuItemList = []
      for (let i = 0; i < items.length; i++) {
        moreMenuItemList.push(new MenuItem(this.videoPlayer, { label: items[i] }))
        moreMenuItemList[i].on('click', $event => {
          this.moreMenuItemList($event)
        })
        moreMenu.addItem(moreMenuItemList[i])
      }
      this.videoPlayer.moreMenu = moreMenu
      this.videoPlayer.moreMenuItemList = moreMenuItemList

      const moreMenuButton = new MenuButton(this.videoPlayer)
      moreMenuButton.addChild(moreMenu)
      moreMenuButton.controlText('显示比例')
      moreMenuButton.addClass('custom-menu-button')
      this.videoPlayer.moreMenuButton = moreMenuButton
      this.videoPlayer.controlBar.addChild(moreMenuButton, {})
    }
  },
  destroyed() {
    this.videoPlayer.dispose();
  }
}
</script>

<style lang="scss">
/*覆盖控件样式*/
.vjs-has-started .vjs-control-bar {
  display: inline-block;

  .vjs-play-control, .vjs-volume-panel {
    float: left;
  }

  .vjs-fullscreen-control, .vjs-playback-rate {
    float: right;
  }

  .vjs-time-control {
    display: inline-block;
    padding: 0;
    float: left;
  }

  .vjs-download-btn {
    float: right;
    cursor: pointer;

    .vjs-icon-placeholder {
      &:before {
        content: "\f101";
      }
    }
  }

  .custom-menu-button {
    display: inline-block;
    float: left;
  }
}

/*覆盖进度条样式*/
.video-js .vjs-progress-control {
  position: absolute;
  width: 100%;
  top: -1em;
  height: 1em;
  padding: 1em .5em 0 .5em;
  background: rgba(43, 51, 63, 0.7);
}

.video-js .vjs-play-progress::before {
  top: -0.4em;
}

/*覆盖播放按钮样式*/
.video-js .vjs-big-play-button {
  font-size: 2.5em;
  line-height: 2.3em;
  height: 2.5em;
  width: 2.5em;
  -webkit-border-radius: 2.5em;
  -moz-border-radius: 2.5em;
  border-radius: 2.5em;
  background-color: #73859f;
  background-color: rgba(115, 133, 159, 0.5);
  border-width: 0.15em;
  margin-top: -1.25em;
  margin-left: -1.75em;
}

.vjs-big-play-button .vjs-icon-placeholder {
  font-size: 1.63em;
}

/*暂停时显示播放按钮*/
.vjs-paused .vjs-big-play-button,
.vjs-paused.vjs-has-started .vjs-big-play-button {
  display: block;
}

.vjs-slider-vertical .vjs-volume-level:before {
  left: -0.4em;
}

</style>
